/*********************************************
 * Bluetooth Accelerometer PIC18f2320 v1.0   *
 * by Christopher S. Case pryynaek@gmail.com *
 *********************************************/

#include <p18F2320.h>	// PIC18F2320 header
#include <usart.h>		// UART header

// Defines
#define true 1
#define false 0

// set configuration bits
#pragma config OSC=HSPLL

char nibbleToHex (unsigned char nib)
{
	if (nib > 9)
		return nib - 10 + 'A';
	else
		return nib + '0';
}

void byteToHex (unsigned char byte, char* buff)
{
	unsigned char nibLow, nibHigh;

	// Get the low nibble
	nibLow = byte & 0x0F;
	buff[1] = nibbleToHex (nibLow);

	// Get the high nibble
	nibHigh = byte >> 4;
	nibHigh = byte & 0x0F;
	buff[0] = nibbleToHex (nibHigh);
}

void main (void)
{
	// Variable defines
	char adResult[2];
	
	/*----------------------- PIC Pin Configuration -----------------------*/
	
	// OSCCON = 0b11111111;	//Configure oscillator, if needed

	// Configure PORTA
	TRISA = 0b11110000;	// AN0-3 Inputs, rest Outputs
	
	// Configure unused ports as output to prevent floating inputs
	TRISB = 0b00000000;
	TRISC = 0b10000000;	// RC0 as input
	
	// Set initial conditions for output ports
	LATA = 0b00000000;
	LATB = 0b11111111;
	LATC = 0b11111111;

	// Set up A/D Converter
	ADCON1 = 0b10101000;	// AN0-4 analog, Vref+ in use
	ADCON2 = 0b11000000;	// OSC/64, 0 TAD, Results left justified

	// Configure for USART
	RCSTAbits.SPEN = 1;
	TRISCbits.TRISC6 = 0;
	TRISCbits.TRISC7 = 1;
	TXSTAbits.BRGH = 1;
	
	// Initialize USART
	OpenUSART((USART_TX_INT_OFF & 
				USART_RX_INT_OFF & 
				USART_ASYNCH_MODE & 
				USART_EIGHT_BIT & 
				USART_CONT_RX & 
				USART_BRGH_HIGH) ,21); //115200 baud, USART communication.	
	/*---------------------------------------------------------------------*/

	/*----------------------------- Main Loop -----------------------------*/
	while (true)
	{
		ADCON0bits.ADON = 1;	// Turn on the A/D Converter
		ADCON0bits.GO = 1;	// Start Conversion
		while (ADCON0bits.GO_DONE) {}	// Wait for the A/D to finish



		// Byte to ASCI conversion
		byteToHex (ADRES, adResult);
		
		putsUSART(adResult);
	}
	/*---------------------------------------------------------------------*/
}

